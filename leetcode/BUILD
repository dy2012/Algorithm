#load('@rules_cc//cc:defs.bzl', "cc_binary")

config_setting (
    name = "linux",
    values = {"cpu" : "linux"},
    visibility = ["//visibility:public"]
)

LINKOPTS = [
    "-lpthread",
    "-ldl"
]

cc_binary(
    name = "invert_binary_tree",
    srcs = [ "invert_binary_tree.cpp"],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "symmetric_tree",
    srcs = [ "symmetric_tree.cpp"],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "maximum_depth_of_binary_tree",
    srcs = [ "maximum_depth_of_binary_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "binary_tree_inorder_traversal",
    srcs = [ "binary_tree_inorder_traversal.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "validate_binary_search_tree",
    srcs = [ "validate_binary_search_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "binary_tree_level_order_traversal",
    srcs = [ "binary_tree_level_order_traversal.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "binary_tree_right_side_view",
    srcs = [ "binary_tree_right_side_view.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "implement_trie",
    srcs = [ "implement_trie.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "lowest_common_ancestor_of_a_binary_tree",
    srcs = [ "lowest_common_ancestor_of_a_binary_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "sort_list",
    srcs = [ "sort_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "linked_list_cycle",
    srcs = [ "linked_list_cycle.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "linked_list_cycle2",
    srcs = [ "linked_list_cycle2.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "merge_two_sorted_list",
    srcs = [ "merge_two_sorted_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "copy_random_list",
    srcs = [ "copy_random_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "kth_smallest_element_in_a_bst",
    srcs = [ "kth_smallest_element_in_a_bst.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "partition_labels",
    srcs = [ "partition_labels.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "subarray_sum_equals_k",
    srcs = [ "subarray_sum_equals_k.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "diameter_of_binary_tree",
    srcs = [ "diameter_of_binary_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "daily_temperatures",
    srcs = [ "daily_temperatures.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "decode_string",
    srcs = [ "decode_string.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "subsets",
    srcs = [ "subsets.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)
