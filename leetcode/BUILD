#load('@rules_cc//cc:defs.bzl', "cc_binary")

config_setting (
    name = "linux",
    values = {"cpu" : "linux"},
    visibility = ["//visibility:public"]
)

LINKOPTS = [
    "-lpthread",
    "-ldl"
]

cc_binary(
    name = "invert_binary_tree",
    srcs = [ "invert_binary_tree.cpp"],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "symmetric_tree",
    srcs = [ "symmetric_tree.cpp"],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "maximum_depth_of_binary_tree",
    srcs = [ "maximum_depth_of_binary_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "binary_tree_inorder_traversal",
    srcs = [ "binary_tree_inorder_traversal.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "validate_binary_search_tree",
    srcs = [ "validate_binary_search_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "binary_tree_level_order_traversal",
    srcs = [ "binary_tree_level_order_traversal.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "binary_tree_right_side_view",
    srcs = [ "binary_tree_right_side_view.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "implement_trie",
    srcs = [ "implement_trie.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "lowest_common_ancestor_of_a_binary_tree",
    srcs = [ "lowest_common_ancestor_of_a_binary_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "sort_list",
    srcs = [ "sort_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "linked_list_cycle",
    srcs = [ "linked_list_cycle.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "linked_list_cycle2",
    srcs = [ "linked_list_cycle2.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "merge_two_sorted_list",
    srcs = [ "merge_two_sorted_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "copy_random_list",
    srcs = [ "copy_random_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "kth_smallest_element_in_a_bst",
    srcs = [ "kth_smallest_element_in_a_bst.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "partition_labels",
    srcs = [ "partition_labels.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "subarray_sum_equals_k",
    srcs = [ "subarray_sum_equals_k.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "diameter_of_binary_tree",
    srcs = [ "diameter_of_binary_tree.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "daily_temperatures",
    srcs = [ "daily_temperatures.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "decode_string",
    srcs = [ "decode_string.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "subsets",
    srcs = [ "subsets.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "best_time_to_buy_and_sell_stock",
    srcs = [ "best_time_to_buy_and_sell_stock.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "rotate_array",
    srcs = [ "rotate_array.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "number_of_islands",
    srcs = [ "number_of_islands.cpp"],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "course_schedule",
    srcs = [ "course_schedule.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "single_number",
    srcs = [ "single_number.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "roman_to_integer",
    srcs = [ "roman_to_integer.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "3_sum",
    srcs = [ "3_sum.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "coin_change",
    srcs = [ "coin_change.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "top_k_frequent_elements",
    srcs = [ "top_k_frequent_elements.cc" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "permutation_in_string",
    srcs = [ "permutation_in_string.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "unique_paths",
    srcs = [ "unique_paths.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "maximum_subarray",
    srcs = [ "maximum_subarray.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "permutation",
    srcs = [ "permutation.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "oranges_rotting",
    srcs = [ "oranges_rotting.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "majority_elelment",
    srcs = [ "majority_elelment.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "two_sum",
    srcs = [ "two_sum.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "add_two_number",
    srcs = [ "add_two_number.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "median_of_two_sorted_arrays",
    srcs = [ "median_of_two_sorted_arrays.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "stl_next_permutation",
    srcs = [ "stl_next_permutation.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "stl_unique",
    srcs = [ "stl_unique.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "valid_parentheses",
    srcs = [ "valid_parentheses.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "generate_parentheses",
    srcs = [ "generate_parentheses.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "merge_k_sorted_lists",
    srcs = [ "merge_k_sorted_lists.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "climbing_stairs",
    srcs = [ "climbing_stairs.cpp" ],
    deps =[
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "set_matrix_zeros",
    srcs = [ "set_matrix_zeros.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "pascal_triangle",
    srcs = [ "pascal_triangle.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "house_robber_3",
    srcs = [ "house_robber_3.cc" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "3sum",
    srcs = [ "3sum.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "maximum_product_subarray",
    srcs = [ "maximum_product_subarray.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "partition_equal_subset_sum",
    srcs = [ "partition_equal_subset_sum.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "basic_calculator_2",
    srcs = [ "basic_calculator_2.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "multi_thread",
    srcs = [ "multi_thread.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "remove_nodes_from_linked_list",
    srcs = [ "remove_nodes_from_linked_list.cpp"],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "swapping_nodes_in_a_linked_list",
    srcs = [ "swapping_nodes_in_a_linked_list.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "merge_two_sorted_array",
    srcs = [ "merge_two_sorted_array.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "remove_elements",
    srcs = [ "remove_elements.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "count_bits",
    srcs  = [ "count_bits.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)

cc_binary(
    name = "num_square",
    srcs  = [ "num_square.cpp" ],
    deps = [
    ],
    linkopts = LINKOPTS
)
